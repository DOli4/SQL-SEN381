<%- include('partials/navbar', { user }) %>

<style>
  body{ background:#f9fafb; font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif; margin:0; padding:20px; }
  .container{ max-width:1000px; margin:0 auto; }
  h1{ font-size:28px; font-weight:600; margin-bottom:20px; }
  
  .card{ background:white; border:1px solid #e5e7eb; border-radius:8px; padding:24px; margin-bottom:20px; box-shadow:0 1px 3px rgba(0,0,0,0.1); }
  .topic-title{ font-size:24px; font-weight:600; margin-bottom:10px; color:#1a1a1a; }
  .topic-meta{ color:#6b7280; font-size:14px; margin-bottom:15px; }
  .badge{ display:inline-block; padding:4px 12px; background:#10b981; color:white; border-radius:4px; font-size:13px; font-weight:600; margin-right:8px; }
  .topic-content{ color:#374151; line-height:1.6; margin-bottom:20px; }
  
  .section-title{ font-size:18px; font-weight:600; margin-bottom:12px; color:#1a1a1a; }
  .file-item, .reply-item{ padding:14px; background:#f9fafb; border:1px solid #e5e7eb; border-radius:6px; margin-bottom:10px; }
  .file-item{ display:flex; justify-content:space-between; align-items:center; }
  .file-info{ display:flex; align-items:center; gap:10px; }
  .file-actions{ display:flex; gap:8px; }
  .reply-meta{ font-size:13px; color:#6b7280; margin-bottom:6px; }
  .reply-body{ color:#374151; line-height:1.6; }
  
  .btn{ padding:10px 20px; border:none; border-radius:6px; cursor:pointer; font-weight:600; text-decoration:none; display:inline-block; font-size:14px; }
  .btn-primary{ background:#2563eb; color:white; }
  .btn-primary:hover{ background:#1d4ed8; }
  .btn-secondary{ background:white; color:#374151; border:1px solid #d1d5db; }
  .btn-secondary:hover{ background:#f3f4f6; }
  .btn-edit{ background:white; color:#2563eb; border:1px solid #2563eb; }
  .btn-edit:hover{ background:#2563eb; color:white; }
  .btn-danger{ background:white; color:#dc2626; border:1px solid #dc2626; }
  .btn-danger:hover{ background:#dc2626; color:white; }
  
  textarea{ width:100%; padding:12px; border:1px solid #d1d5db; border-radius:6px; font-family:inherit; font-size:14px; resize:vertical; min-height:100px; box-sizing:border-box; }
  input[type="text"], input[type="number"]{ width:100%; padding:10px; border:1px solid #d1d5db; border-radius:6px; font-size:14px; box-sizing:border-box; }
  .form-group{ margin-bottom:15px; }
  .form-group label{ display:block; font-weight:600; margin-bottom:6px; font-size:14px; }
  
  .actions{ display:flex; gap:10px; }
  .bottom-actions{ display:flex; gap:10px; margin-top:20px; padding-top:20px; border-top:1px solid #e5e7eb; }
  .alert{ padding:12px; border-radius:6px; margin-bottom:15px; }
  .alert-error{ background:#fee2e2; color:#991b1b; border:1px solid #fecaca; }
  .alert-success{ background:#d1fae5; color:#065f46; border:1px solid #a7f3d0; }
  .edit-section{ display:none; }
  .edit-section.active{ display:block; }
  .view-section.hidden{ display:none; }
  .empty{ color:#9ca3af; font-style:italic; }
</style>

<div class="container">
  <h1>Topic</h1>

  <div id="alertBox"></div>

  <!-- Topic Card -->
  <div class="card">
    <div id="viewSection" class="view-section">
      <div id="topicContent">
        <p class="empty">Loading topic...</p>
      </div>
    </div>

    <div id="editSection" class="edit-section">
      <form id="editForm" enctype="multipart/form-data">
        <h2>Edit Topic</h2>
        <div class="form-group">
          <label>Title</label>
          <input type="text" id="editTitle" name="title" required>
        </div>
        <div class="form-group">
          <label>Module</label>
          <input type="number" id="editModule" name="moduleId" required>
        </div>
        <div class="form-group">
          <label>Description</label>
          <textarea id="editDescription" name="description"></textarea>
        </div>
        
        <div class="form-group">
          <label>Current Files</label>
          <div id="editFilesList" class="file-list">
            <!-- Current files will be loaded here -->
          </div>
        </div>

        <div class="form-group">
          <label>Add New Files</label>
          <input type="file" id="editFileInput" name="files" multiple style="display:none" 
                 onchange="handleFileInput(this, document.getElementById('newFilesList'))">
          <div class="file-upload" onclick="document.getElementById('editFileInput').click()" style="border: 1px solid #d1d5db; border-radius: 6px; padding: 20px; min-height: 150px; display: flex; flex-direction: column; justify-content: center; align-items: center; cursor: pointer;">
            <div style="font-size:48px; margin-bottom:10px; display: flex; align-items: center; justify-content: center;">+</div>
            <div style="font-weight:600; margin-bottom:5px;">Click to upload files</div>
            <div style="font-size:13px; color:#6b7280;">PDFs, images, documents (max 10MB each)</div>
          </div>
          <div id="newFilesList" class="file-list">
            <!-- New files will be shown here -->
          </div>
          <input type="file" id="editFileInput" name="files" multiple style="display:none;">
          <div id="newFilesList" class="file-list">
            <!-- New files will be shown here -->
          </div>
        </div>

        <div class="actions">
          <button type="submit" class="btn btn-primary">Save Changes</button>
          <button type="button" class="btn btn-secondary" onclick="cancelEdit()">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Attachments -->
  <div class="card">
    <h3 class="section-title">Attachments</h3>
    <div id="attachmentsList" class="mt-3">
      <p class="empty">No files attached</p>
    </div>
  </div>

  <!-- Replies -->
  <div class="card">
    <h3 class="section-title">Replies</h3>
    <div id="repliesList">
      <p class="empty">Loading replies...</p>
    </div>

    <% if (user) { %>
    <div style="margin-top:20px; padding-top:20px; border-top:1px solid #e5e7eb;">
      <textarea id="replyText" placeholder="Write a reply..."></textarea>
      <div class="actions" style="margin-top:12px;">
        <button class="btn btn-primary" onclick="postReply()">Post Reply</button>
      </div>
    </div>
    <% } else { %>
    <p class="empty" style="margin-top:15px;">You must be logged in to reply.</p>
    <% } %>
  </div>
</div>

<!-- Server variables -->
<script>
  (function() {
    // Initialize server variables in a safe way
    window.topicId = Number('<%- topicId %>'); 
    window.currentUser = <%- JSON.stringify(user || null) %>;
    window.currentTopic = null;
  })();

  function escapeHtml(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  function showAlert(message, isError = false) {
    const alertBox = document.getElementById('alertBox');
    alertBox.innerHTML = `<div class="alert ${isError ? 'alert-error' : 'alert-success'}">${escapeHtml(message)}</div>`;
    setTimeout(() => alertBox.innerHTML = '', 5000);
  }

  function canEdit() {
    if (!currentUser || !currentTopic) return false;
    const userId = currentUser.sub || currentUser.id || currentUser.User_ID;
    const role = (currentUser.RoleName || currentUser.role || '').toLowerCase();
    return currentTopic.User_ID === userId || role === 'admin';
  }

  async function loadTopic() {
    try {
      const res = await fetch(`/api/topics/${topicId}`, { credentials: 'same-origin' });
      if (!res.ok) {
        const error = await res.text();
        throw new Error(error || 'Failed to load topic');
      }
      
      const data = await res.json();
      currentTopic = data.topic;
      window.currentFiles = data.files || [];

      // Display topic
      const content = document.getElementById('topicContent');
      content.innerHTML = `
        <div class="topic-title">${escapeHtml(currentTopic.Title)}</div>
        <div class="topic-meta">
          <span class="badge">Module ${currentTopic.Module_ID}</span>
          Posted ${new Date(currentTopic.Created_At).toLocaleDateString()}
        </div>
        <div class="topic-content">${escapeHtml(currentTopic.Description || '')}</div>
        ${canEdit() ? `
          <div class="bottom-actions">
            <button onclick="startEdit()" class="btn btn-edit">Edit</button>
            <button onclick="deleteTopic()" class="btn btn-danger">Delete</button>
          </div>
        ` : ''}
      `;

      // Display attachments
      const attachList = document.getElementById('attachmentsList');
      if (!data.files || data.files.length === 0) {
        attachList.innerHTML = '<p class="empty">No attachments</p>';
      } else {
        attachList.innerHTML = data.files.map(file => `
          <div class="file-item">
            <div class="file-info">
              <span>ðŸ“„ ${escapeHtml(file.FileName)}</span>
              <span style="color:#6b7280;">(${(file.SizeBytes/1024).toFixed(1)} KB)</span>
            </div>
            <div class="file-actions">
              <a href="/api/content/${file.Content_ID}/download" class="btn btn-secondary">Download</a>
              <a href="/api/content/${file.Content_ID}/inline" class="btn btn-secondary" target="_blank">View</a>
              ${canEdit() ? `
                <button onclick="removeExistingFile(${file.Content_ID})" class="btn btn-danger">Delete</button>
              ` : ''}
            </div>
          </div>
        `).join('');
      }

      // Display replies
      const replyList = document.getElementById('repliesList');
      if (!data.replies || data.replies.length === 0) {
        replyList.innerHTML = '<p class="empty">No replies yet</p>';
      } else {
        replyList.innerHTML = data.replies.map(reply => `
          <div class="reply-item">
            <div class="reply-meta">
              Posted ${new Date(reply.Created_At).toLocaleDateString()}
            </div>
            <div class="reply-body">${escapeHtml(reply.Content)}</div>
          </div>
        `).join('');
      }

    } catch (e) {
      console.error('Load error:', e);
      document.getElementById('topicContent').innerHTML = `<p class="alert alert-error">Error: ${escapeHtml(e.message)}</p>`;
    }
  }

  function startEdit() {
    if (!currentTopic) {
      showAlert('Topic not loaded yet', true);
      return;
    }

    // Hide view section and show edit section
    document.getElementById('viewSection').classList.add('hidden');
    document.getElementById('editSection').classList.remove('hidden');
    
    // Populate basic info - ensure we have strings for text fields
    document.getElementById('editTitle').value = String(currentTopic.Title || '');
    document.getElementById('editModule').value = String(currentTopic.Module_ID || '');
    document.getElementById('editDescription').value = String(currentTopic.Description || '');
    
    // Show current files
    const filesList = document.getElementById('editFilesList');
    if (!window.currentFiles || window.currentFiles.length === 0) {
      filesList.innerHTML = '<p class="empty">No files attached</p>';
    } else {
      filesList.innerHTML = window.currentFiles.map(file => `
        <div class="file-item">
          <div class="file-info">
            <span>ðŸ“„ ${escapeHtml(file.FileName)}</span>
            <span style="color:#6b7280;">(${(file.SizeBytes/1024).toFixed(1)} KB)</span>
          </div>
          <button type="button" class="btn-remove" onclick="removeExistingFile(${file.Content_ID})">âœ• Remove</button>
        </div>
      `).join('');
    }

    // Clear new files
    document.getElementById('editFileInput').value = '';
    document.getElementById('newFilesList').innerHTML = '';
    
    // Show edit form
    document.getElementById('viewSection').classList.add('hidden');
    document.getElementById('editSection').classList.add('active');
  }

  function cancelEdit() {
    document.getElementById('viewSection').classList.remove('hidden');
    document.getElementById('editSection').classList.remove('active');
  }

  function handleFileInput(inputElement, listElement) {
    const files = Array.from(inputElement.files);
    if (files.length === 0) {
      listElement.innerHTML = '';
      return;
    }

    listElement.innerHTML = files.map((file, i) => `
      <div class="file-item">
        <div class="file-info">
          <span>ðŸ“„ ${escapeHtml(file.name)}</span>
          <span style="color:#6b7280;">(${(file.size/1024).toFixed(1)} KB)</span>
        </div>
        <button type="button" class="btn-remove" onclick="removeNewFile(${i}, '${inputElement.id}', '${listElement.id}')">âœ• Remove</button>
      </div>
    `).join('');
  }

  function removeNewFile(index, inputId, listId) {
    const input = document.getElementById(inputId);
    const dt = new DataTransfer();
    const files = Array.from(input.files);
    files.forEach((f, i) => {
      if (i !== index) dt.items.add(f);
    });
    input.files = dt.files;
    handleFileInput(input, document.getElementById(listId));
  }

  async function removeExistingFile(contentId) {
    if (!contentId) {
      console.error('Invalid content ID:', contentId);
      showAlert('Cannot remove file: Invalid file ID', true);
      return;
    }

    try {
      console.log('Removing file:', contentId);
      const res = await fetch(`/api/content/${contentId}`, {
        method: 'DELETE',
        credentials: 'same-origin',
        headers: {
          'Accept': 'application/json'
        }
      });

      console.log('Delete response status:', res.status);
      const contentType = res.headers.get('content-type');
      console.log('Response content type:', contentType);

      if (!res.ok) {
        let error;
        try {
          if (contentType && contentType.includes('application/json')) {
            const data = await res.json();
            error = data.error;
          } else {
            error = await res.text();
          }
        } catch (e) {
          console.error('Error parsing response:', e);
          error = 'Failed to parse server response';
        }
        throw new Error(error || 'Failed to delete file');
      }

      try {
        await res.json();
      } catch (e) {
        console.log('Response was not JSON (this is ok)');
      }

      console.log('File removed successfully');
      showAlert('File removed successfully');
      
      // Update window.currentFiles to remove the deleted file
      window.currentFiles = (window.currentFiles || []).filter(f => f.Content_ID !== contentId);
      
      // Reload the topic to refresh the view
      await loadTopic();
    } catch (e) {
      console.error('Remove file error:', e);
      showAlert('Failed to remove file: ' + e.message, true);
    }
  }

  async function saveEdit(e) {
    e.preventDefault();

    try {
      console.log('Starting edit save...');
      
      // Create FormData object
      const formData = new FormData();
      
      // Add form field values
      formData.append('title', document.getElementById('editTitle').value.trim());
      formData.append('moduleId', document.getElementById('editModule').value.trim());
      formData.append('description', document.getElementById('editDescription').value.trim());

      // Validate required fields
      if (!formData.get('title')) {
        showAlert('Title is required', true);
        return;
      }

      if (!formData.get('moduleId')) {
        showAlert('Module is required', true);
        return;
      }
      
      // Add files from file input
      const fileInput = document.getElementById('editFileInput');
      if (fileInput && fileInput.files) {
        for (const file of fileInput.files) {
          formData.append('files', file);
        }
      }

      // Validate required fields
      const title = formData.get('title')?.trim();
      const moduleId = formData.get('moduleId');

      if (!title) {
        showAlert('Title is required', true);
        return;
      }

      if (!moduleId) {
        showAlert('Module is required', true);
        return;
      }

      // Add list of files to keep (not removed)
      console.log('Current files:', window.currentFiles);
      const keptFiles = [];
      if (window.currentFiles && Array.isArray(window.currentFiles)) {
        for (const file of window.currentFiles) {
          if (file && file.Content_ID) {
            const selector = `button[onclick*="removeExistingFile(${file.Content_ID})"]`;
            console.log('Checking file:', file.Content_ID, 'with selector:', selector);
            const removeBtn = document.querySelector(selector);
            if (removeBtn) {
              console.log('Keeping file:', file.Content_ID);
              keptFiles.push(file.Content_ID);
            }
          }
        }
      }
      console.log('Kept files:', keptFiles);
      formData.append('keepFiles', JSON.stringify(keptFiles));

      console.log('Sending update request...');
      const res = await fetch(`/api/topics/${topicId}/withfiles`, {
        method: 'PUT',
        credentials: 'same-origin',
        headers: {
          'Accept': 'application/json'
        },
        body: formData
      });

      console.log('Response status:', res.status);
      const contentType = res.headers.get('content-type');
      console.log('Response content type:', contentType);

      if (!res.ok) {
        let error;
        try {
          if (contentType && contentType.includes('application/json')) {
            const data = await res.json();
            error = data.error;
          } else {
            error = await res.text();
          }
        } catch (e) {
          console.error('Error parsing response:', e);
          error = 'Server error occurred';
        }
        throw new Error(error || 'Update failed');
      }

      // Parse success response
      const result = await res.json();
      console.log('Update successful:', result);

      // Reset form fields
      document.getElementById('editTitle').value = '';
      document.getElementById('editModule').value = '';
      document.getElementById('editDescription').value = '';
      document.getElementById('editFileInput').value = '';
      document.getElementById('editFilesList').innerHTML = '';
      document.getElementById('newFilesList').innerHTML = '';
      
      // Show success message
      showAlert('Topic updated successfully');
      
      // Hide edit form and show view section
      document.getElementById('viewSection').classList.remove('hidden');
      document.getElementById('editSection').classList.add('hidden');
      
      // Reload topic to show updated content
      await loadTopic();
    } catch (e) {
      console.error('Update error:', e);
      showAlert('Failed to update topic: ' + (e.message || 'Server error occurred'), true);
    }
  }

  // Set up file input handler
  document.getElementById('editFileInput').addEventListener('change', function() {
    handleFileInput(this, document.getElementById('newFilesList'));
  });

  // Set up form submit handler
  document.getElementById('editForm').addEventListener('submit', saveEdit);

  async function deleteTopic() {
    if (!confirm('Are you sure you want to delete this topic? This cannot be undone.')) {
      return;
    }

    try {
      const res = await fetch(`/api/topics/${topicId}`, {
        method: 'DELETE',
        credentials: 'same-origin'
      });

      if (!res.ok) {
        const error = await res.text();
        throw new Error(error || 'Delete failed');
      }

      showAlert('Topic deleted successfully');
      setTimeout(() => window.location.href = '/forum', 1500);
    } catch (e) {
      console.error('Delete error:', e);
      showAlert('Failed to delete: ' + e.message, true);
    }
  }

  async function postReply() {
    const replyText = document.getElementById('replyText').value.trim();
    if (!replyText) {
      return;
    }

    try {
      const res = await fetch(`/api/topics/${topicId}/replies`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'same-origin',
        body: JSON.stringify({ text: replyText })
      });

      if (!res.ok) {
        const error = await res.text();
        throw new Error(error || 'Failed to post reply');
      }

      document.getElementById('replyText').value = '';
      showAlert('Reply posted successfully');
      await loadTopic();
    } catch (e) {
      console.error('Reply error:', e);
      showAlert('Failed to post reply: ' + e.message, true);
    }
  }

  loadTopic();
</script>