/* ------------------------------------------------------------------
   Clean rebuild of forum schema (safe to re-run)
   ------------------------------------------------------------------ */
USE [master];
GO

/* Drop in child→parent order (ignore if missing) */
IF OBJECT_ID('dbo.Content',         'U') IS NOT NULL DROP TABLE dbo.Content;
IF OBJECT_ID('dbo.Reply',           'U') IS NOT NULL DROP TABLE dbo.Reply;
IF OBJECT_ID('dbo.TopicSubscriber', 'U') IS NOT NULL DROP TABLE dbo.TopicSubscriber;
IF OBJECT_ID('dbo.TutorSubscriber', 'U') IS NOT NULL DROP TABLE dbo.TutorSubscriber;
IF OBJECT_ID('dbo.UserModule',      'U') IS NOT NULL DROP TABLE dbo.UserModule;
IF OBJECT_ID('dbo.Topic',           'U') IS NOT NULL DROP TABLE dbo.Topic;
IF OBJECT_ID('dbo.[User]',          'U') IS NOT NULL DROP TABLE dbo.[User];
IF OBJECT_ID('dbo.Modules',         'U') IS NOT NULL DROP TABLE dbo.Modules;
IF OBJECT_ID('dbo.Roles',           'U') IS NOT NULL DROP TABLE dbo.Roles;
GO

/* ------------------------- Roles ------------------------- */
CREATE TABLE dbo.Roles
(
    Role_ID     INT IDENTITY(1,1) PRIMARY KEY,
    [Name]      VARCHAR(10)   NOT NULL,
    [Description] VARCHAR(200) NULL
);
GO

/* -------------------------- User ------------------------- */
CREATE TABLE dbo.[User]
(
    User_ID     INT IDENTITY(1,1) PRIMARY KEY,
    Role_ID     INT         NOT NULL,
    Username    VARCHAR(30) NOT NULL UNIQUE,
    First_Name  VARCHAR(30) NULL,
    Last_Name   VARCHAR(30) NULL,
    Phone       VARCHAR(15) NULL,
    Email       VARCHAR(50) NULL UNIQUE,
    Credentials VARCHAR(100) NULL,
    DOB         DATE        NULL,
    [Password]  VARCHAR(128) NOT NULL,
    [Status]    VARCHAR(10)  NULL,
    Created_On  DATETIME     NOT NULL DEFAULT (GETDATE()),
    CONSTRAINT FK_User_Role
        FOREIGN KEY (Role_ID) REFERENCES dbo.Roles(Role_ID)
);
GO

/* ------------------------ Modules ------------------------ */
CREATE TABLE dbo.Modules
(
    Module_ID   INT IDENTITY(1,1) PRIMARY KEY,
    [Name]      VARCHAR(10)   NOT NULL,
    [Description] VARCHAR(200) NULL
);
GO

/* ------------------------- Topic ------------------------- */
CREATE TABLE dbo.Topic
(
    Topic_ID    INT IDENTITY(1,1) PRIMARY KEY,
    User_ID     INT NOT NULL,
    Module_ID   INT NOT NULL,
    Title       VARCHAR(500)  NOT NULL,
    [Description] VARCHAR(MAX) NULL,   -- “20k” → use MAX
    Upvotes     INT NOT NULL DEFAULT(0),
    Downvotes   INT NOT NULL DEFAULT(0),
    CONSTRAINT FK_Topic_User
        FOREIGN KEY (User_ID)   REFERENCES dbo.[User](User_ID),
    CONSTRAINT FK_Topic_Module
        FOREIGN KEY (Module_ID) REFERENCES dbo.Modules(Module_ID)
);
GO

/* ------------------------- Reply ------------------------- */
CREATE TABLE dbo.Reply
(
    Reply_ID        INT IDENTITY(1,1) PRIMARY KEY,
    Topic_ID        INT NOT NULL,
    Parent_Reply_ID INT NULL,
    User_ID         INT NOT NULL,
    [Description]   VARCHAR(MAX) NULL,  -- “15k” → use MAX
    Upvote          INT NOT NULL DEFAULT(0),
    Downvote        INT NOT NULL DEFAULT(0),
    CONSTRAINT FK_Reply_Topic
        FOREIGN KEY (Topic_ID)        REFERENCES dbo.Topic(Topic_ID),
    CONSTRAINT FK_Reply_Parent
        FOREIGN KEY (Parent_Reply_ID) REFERENCES dbo.Reply(Reply_ID),
    CONSTRAINT FK_Reply_User
        FOREIGN KEY (User_ID)         REFERENCES dbo.[User](User_ID)
);
GO

/* ------------------------ Content ------------------------ */
CREATE TABLE dbo.Content
(
    Content_ID  INT IDENTITY(1,1) PRIMARY KEY,
    Reply_ID    INT NULL,
    Topic_ID    INT NULL,
    [Path]      VARCHAR(300) NOT NULL,
    CONSTRAINT FK_Content_Reply FOREIGN KEY (Reply_ID) REFERENCES dbo.Reply(Reply_ID),
    CONSTRAINT FK_Content_Topic FOREIGN KEY (Topic_ID) REFERENCES dbo.Topic(Topic_ID),
    -- ensure at least one association exists
    CONSTRAINT CK_Content_AtLeastOneRef CHECK (Reply_ID IS NOT NULL OR Topic_ID IS NOT NULL)
);
GO

/* ---------------------- UserModule ----------------------- */
CREATE TABLE dbo.UserModule
(
    Module_ID INT NOT NULL,
    User_ID   INT NOT NULL,
    CONSTRAINT PK_UserModule PRIMARY KEY (Module_ID, User_ID),
    CONSTRAINT FK_UserModule_Module FOREIGN KEY (Module_ID) REFERENCES dbo.Modules(Module_ID),
    CONSTRAINT FK_UserModule_User   FOREIGN KEY (User_ID)   REFERENCES dbo.[User](User_ID)
);
GO

/* -------------------- TopicSubscriber -------------------- */
CREATE TABLE dbo.TopicSubscriber
(
    Topic_ID INT NOT NULL,
    User_ID  INT NOT NULL,
    CONSTRAINT PK_TopicSubscriber PRIMARY KEY (Topic_ID, User_ID),
    CONSTRAINT FK_TopicSubscriber_Topic FOREIGN KEY (Topic_ID) REFERENCES dbo.Topic(Topic_ID),
    CONSTRAINT FK_TopicSubscriber_User  FOREIGN KEY (User_ID)  REFERENCES dbo.[User](User_ID)
);
GO

/* -------------------- TutorSubscriber -------------------- */
CREATE TABLE dbo.TutorSubscriber
(
    Tutor_ID   INT NOT NULL,
    Student_ID INT NOT NULL,
    CONSTRAINT PK_TutorSubscriber PRIMARY KEY (Tutor_ID, Student_ID),
    CONSTRAINT FK_TutorSubscriber_Tutor   FOREIGN KEY (Tutor_ID)   REFERENCES dbo.[User](User_ID),
    CONSTRAINT FK_TutorSubscriber_Student FOREIGN KEY (Student_ID) REFERENCES dbo.[User](User_ID),
    CONSTRAINT CK_TutorStudent_NotEqual CHECK (Tutor_ID <> Student_ID)
);
GO

/* -------- Helpful indexes on foreign keys (performance) -- */
CREATE INDEX IX_User_Role               ON dbo.[User](Role_ID);
CREATE INDEX IX_Topic_User              ON dbo.Topic(User_ID);
CREATE INDEX IX_Topic_Module            ON dbo.Topic(Module_ID);
CREATE INDEX IX_Reply_Topic             ON dbo.Reply(Topic_ID);
CREATE INDEX IX_Reply_Parent            ON dbo.Reply(Parent_Reply_ID);
CREATE INDEX IX_Reply_User              ON dbo.Reply(User_ID);
CREATE INDEX IX_Content_Reply           ON dbo.Content(Reply_ID);
CREATE INDEX IX_Content_Topic           ON dbo.Content(Topic_ID);
CREATE INDEX IX_UserModule_User         ON dbo.UserModule(User_ID);
CREATE INDEX IX_TopicSubscriber_User    ON dbo.TopicSubscriber(User_ID);
CREATE INDEX IX_TutorSubscriber_Student ON dbo.TutorSubscriber(Student_ID);
GO
