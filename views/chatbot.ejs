<% pageClass = 'theme-dark' %>

<main class="cl-root">
  <!-- Header -->
  <header class="cl-header">
    <div class="cl-brand">
      <div class="cl-logo">ðŸ’¬</div>
      <div>
        <h1 class="cl-title">CampusLearnHelper</h1>
      </div>
    </div>
  </header>

  <!-- Input bar -->
  <section class="cl-composer">
    <form id="chatForm" class="cl-composer-form" aria-label="Chat input">
      <input id="userMessage" class="cl-input" type="text"
             placeholder="Message CampuesLearnHelper" autocomplete="off" />
      <button class="cl-send" type="submit">Send</button>
    </form>
  </section>

  <!-- Quick actions -->
  <section class="cl-quick">
    <button class="cl-card" data-msg="Ask a tutor">
      <span class="cl-card-title">Ask a Tutor</span>
      <span class="cl-card-desc">I need help understanding a topic in SEN381.</span>
    </button>
    <button class="cl-card" data-msg="Find study material">
      <span class="cl-card-title">Find Study Material</span>
      <span class="cl-card-desc">Show me the notes for Database Systems.</span>
    </button>
    <button class="cl-card" data-msg="How do I upload an assignment?">
      <span class="cl-card-title">How to Upload Content</span>
      <span class="cl-card-desc">How do I upload a PDF or assignment on CampusLearn?</span>
    </button>
  </section>

  <!-- Chat log -->
  <section class="cl-chat" aria-live="polite">
    <ul id="log" class="cl-log"></ul>
  </section>
</main>

<script>
  const log   = document.getElementById("log");
  const input = document.getElementById("userMessage");
  const form  = document.getElementById("chatForm");

  // simple message helper
  function addMsg(who, text) {
    const li = document.createElement("li");
    li.className = who === "you" ? "cl-msg you" : "cl-msg bot";
    li.innerHTML = `<div class="cl-bubble">${(text || "").replace(/\n/g,"<br>")}</div>`;
    log.appendChild(li);
    log.parentElement.scrollTop = log.parentElement.scrollHeight;
  }

  // quick cards click â†’ submit
  document.querySelectorAll(".cl-card").forEach(btn => {
    btn.addEventListener("click", () => {
      input.value = btn.dataset.msg;
      form.dispatchEvent(new Event("submit", { cancelable: true }));
    });
  });

  // suggested replies container + renderer
  const suggContainer = document.createElement("div");
  suggContainer.id = "suggested";
  suggContainer.style.marginTop = "10px";

  function showSuggestions(arr = []) {
    suggContainer.innerHTML = "";
    arr.forEach(label => {
      const b = document.createElement("button");
      b.type = "button";
      b.className = "btn btn-sm btn-outline-light me-2 mb-2";
      b.textContent = label;
      b.onclick = () => {
        input.value = label;
        form.dispatchEvent(new Event("submit", { cancelable: true }));
      };
      suggContainer.appendChild(b);
    });
    // place suggestions under the chat panel
    log.parentElement.after(suggContainer);
  }

  // submit â†’ call backend
  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const message = input.value.trim();
    if (!message) return;

    addMsg("you", message);
    input.value = "";
    showSuggestions([]); // clear while loading

    try {
      const res  = await fetch("/chatbot", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message })
      });

      const data = await res.json();
      if (!res.ok || data.error) throw new Error(data.error || "Request failed");

      addMsg("bot", data.reply);
      showSuggestions(data.suggestedReplies || []);

    } catch (err) {
      addMsg("bot", "Sorryâ€”something went wrong. Please try again.");
      showSuggestions([
        "Ask a tutor",
        "Find study material",
        "How do I upload an assignment?"
      ]);
      console.error(err);
    }
  });

  // focus on load
  input.focus();
</script>
