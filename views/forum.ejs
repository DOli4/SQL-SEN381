<%- include('partials/navbar', { user }) %>

<style>
  body{ background:#f9fafb; font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif; margin:0; padding:20px; }
  .container{ max-width:800px; margin:0 auto; }
  .header{ display:flex; justify-content:space-between; align-items:center; margin-bottom:20px; }
  .card{ background:white; border:1px solid #e5e7eb; border-radius:8px; padding:30px; box-shadow:0 1px 3px rgba(0,0,0,0.1); }
  .form-group{ margin-bottom:20px; }
  .form-group label{ display:block; font-weight:600; margin-bottom:8px; font-size:14px; color:#374151; }
  input[type="text"], input[type="number"], textarea, select{ width:100%; padding:12px; border:1px solid #d1d5db; border-radius:6px; font-size:14px; font-family:inherit; }
  textarea{ min-height:120px; resize:vertical; }
  .file-upload{ border:2px dashed #d1d5db; border-radius:8px; padding:30px; text-align:center; background:#f9fafb; cursor:pointer; transition:all 0.2s; }
  .file-upload:hover{ border-color:#2563eb; background:#eff6ff; }
  .file-list{ margin-top:15px; }
  .file-item{ display:flex; justify-content:space-between; align-items:center; padding:10px; background:#f3f4f6; border-radius:6px; margin-bottom:8px; }
  .btn{ padding:12px 24px; border:none; border-radius:6px; cursor:pointer; font-weight:600; text-decoration:none; display:inline-block; font-size:14px; }
  .btn-primary{ background:#2563eb; color:white; }
  .btn-primary:hover{ background:#1d4ed8; }
  .btn-secondary{ background:white; color:#374151; border:1px solid #d1d5db; }
  .btn-secondary:hover{ background:#f3f4f6; }
  .btn-remove{ background:none; border:none; color:#dc2626; cursor:pointer; font-weight:600; }
  .actions{ display:flex; gap:12px; margin-top:25px; }
  .alert{ padding:12px; border-radius:6px; margin-bottom:15px; }
  .alert-error{ background:#fee2e2; color:#991b1b; border:1px solid #fecaca; }
  .alert-success{ background:#d1fae5; color:#065f46; border:1px solid #a7f3d0; }
</style>

<div class="container">
  <div class="card">
    <div id="alertBox"></div>

    <form id="topicForm" enctype="multipart/form-data">
      <div class="form-group">
        <label for="title">Title</label>
        <input type="text" id="title" name="title" placeholder="e.g., Exam Tips" required>
      </div>

      <div class="form-group">
        <label for="moduleId">Module</label>
        <input type="number" id="moduleId" name="moduleId" placeholder="1" required>
        <small style="color:#6b7280;">Use a real Module_ID (e.g., 1 for SEN381) from dbo.Modules.</small>
      </div>

      <div class="form-group">
        <label for="description">Content</label>
        <textarea id="description" name="description" placeholder="Study Guide"></textarea>
      </div>

      <div class="form-group">
        <label>Attach content</label>
        <div class="file-upload" onclick="document.getElementById('fileInput').click()">
          <div style="font-size:48px; margin-bottom:10px;">ðŸ“Ž</div>
          <div style="font-weight:600; margin-bottom:5px;">Click to upload files</div>
          <div style="font-size:13px; color:#6b7280;">PDFs, images, documents (max 10MB each)</div>
        </div>
        <input type="file" id="fileInput" name="files" multiple accept="*/*" style="display:none;">
        <div id="fileList" class="file-list"></div>
      </div>

      <div class="actions">
        <button type="submit" class="btn btn-primary">Submit</button>
        <a href="/forum" class="btn btn-secondary">Cancel</a>
      </div>
    </form>
  </div>
</div>

<script>
  const form = document.getElementById('topicForm');
  const fileInput = document.getElementById('fileInput');
  const fileList = document.getElementById('fileList');
  const alertBox = document.getElementById('alertBox');

  function showAlert(message, isError = false) {
    alertBox.innerHTML = `<div class="alert ${isError ? 'alert-error' : 'alert-success'}">${escapeHtml(message)}</div>`;
    setTimeout(() => alertBox.innerHTML = '', 5000);
  }

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  fileInput.addEventListener('change', displayFiles);

  function displayFiles() {
    const files = Array.from(fileInput.files);
    if (files.length === 0) {
      fileList.innerHTML = '';
      return;
    }

    fileList.innerHTML = files.map((f, i) => `
      <div class="file-item">
        <span>ðŸ“„ ${escapeHtml(f.name)} <span style="color:#6b7280;">(${(f.size/1024).toFixed(1)} KB)</span></span>
        <button type="button" class="btn-remove" onclick="removeFile(${i})">âœ• Remove</button>
      </div>
    `).join('');
  }

  window.removeFile = function(index) {
    const dt = new DataTransfer();
    const files = Array.from(fileInput.files);
    files.forEach((f, i) => {
      if (i !== index) dt.items.add(f);
    });
    fileInput.files = dt.files;
    displayFiles();
  };

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    alertBox.innerHTML = '';

    const title = document.getElementById('title').value.trim();
    const moduleId = document.getElementById('moduleId').value.trim();
    const description = document.getElementById('description').value.trim();

    if (!title || title.length < 4) {
      showAlert('Title must be at least 4 characters', true);
      return;
    }

    if (!moduleId) {
      showAlert('Module is required', true);
      return;
    }

    try {
      const formData = new FormData();
      formData.append('title', title);
      formData.append('moduleId', moduleId);
      if (description) formData.append('description', description);

      // Add files
      const files = Array.from(fileInput.files);
      files.forEach(file => {
        formData.append('files', file);
      });

      const res = await fetch('/api/topics/withfiles', {
        method: 'POST',
        body: formData,
        credentials: 'same-origin'
      });

      if (!res.ok) {
        const error = await res.text();
        throw new Error(error || 'Failed to create topic');
      }

      const data = await res.json();
      
      if (!data.Topic_ID) {
        throw new Error('No topic ID returned');
      }

      showAlert('Topic created successfully!');
      setTimeout(() => {
        window.location.href = `/forum/${data.Topic_ID}`;
      }, 1000);
    } catch (err) {
      console.error('Submit error:', err);
      showAlert('Failed to create topic: ' + err.message, true);
    }
  });
</script>